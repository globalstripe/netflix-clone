[{"/Users/cclark/july-netflix/netflix-clone/src/Banner.js":"1","/Users/cclark/july-netflix/netflix-clone/src/App.js":"2","/Users/cclark/july-netflix/netflix-clone/src/axios.js":"3","/Users/cclark/july-netflix/netflix-clone/src/reportWebVitals.js":"4","/Users/cclark/july-netflix/netflix-clone/src/index.js":"5","/Users/cclark/july-netflix/netflix-clone/src/Footer.js":"6","/Users/cclark/july-netflix/netflix-clone/src/Nav.js":"7","/Users/cclark/july-netflix/netflix-clone/src/Row.js":"8","/Users/cclark/july-netflix/netflix-clone/src/Profile.js":"9","/Users/cclark/july-netflix/netflix-clone/src/getlocation.js":"10","/Users/cclark/july-netflix/netflix-clone/src/googlemaps.js":"11"},{"size":4728,"mtime":1607114716639,"results":"12","hashOfConfig":"13"},{"size":1500,"mtime":1607114892439,"results":"14","hashOfConfig":"13"},{"size":187,"mtime":1606657119710,"results":"15","hashOfConfig":"13"},{"size":362,"mtime":1606652405990,"results":"16","hashOfConfig":"13"},{"size":500,"mtime":1606652405990,"results":"17","hashOfConfig":"13"},{"size":299,"mtime":1606853409247,"results":"18","hashOfConfig":"13"},{"size":1693,"mtime":1607105778871,"results":"19","hashOfConfig":"13"},{"size":2896,"mtime":1607108756917,"results":"20","hashOfConfig":"13"},{"size":594,"mtime":1607108620001,"results":"21","hashOfConfig":"13"},{"size":1611,"mtime":1607121238863,"results":"22","hashOfConfig":"13"},{"size":782,"mtime":1607121094856,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"1gi8n77",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cclark/july-netflix/netflix-clone/src/Banner.js",["48","49","50","51"],"import React, {useState, useEffect} from 'react'\nimport {Route, Link } from \"react-router-dom\";\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport axios from './axios'\nimport {isMobile} from 'react-device-detect';\nimport requests from './requests'\nimport './banner.css'\n\nlet movieList = ''\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n    const [descriptionCount, setDescriptionCount] = useState([150]);\n    const [movieList, setMovieList] = useState([]);\n\n    // function refreshBanner() {\n    //     console.log(\"Got Timer event from Header\")\n    //     // So refresh just looks at the existing movieList\n    //     // Doesnt do another axios call to the API\n    //     //console.log(\"MovieList\", movieList)\n    //     const randmovie = Math.floor(Math.random() * movieList.length);\n    //     console.log(\"Random\", randmovie)\n    //     setMovie(movieList[randmovie])\n    //     console.log(\"New Movie\", movieList[randmovie])\n    // }\n \n    useEffect(() => {\n\n        function refreshBanner() {\n            console.log(\"Got Timer event from Header\")\n            // So refresh just looks at the existing movieList\n            // Doesnt do another axios call to the API\n            //console.log(\"MovieList\", movieList)\n            const randmovie = Math.floor(Math.random() * movieList.length);\n            console.log(\"Random\", randmovie)\n            setMovie(movieList[randmovie])\n            console.log(\"New Movie\", movieList[randmovie])\n        }\n    \n        const interval = setInterval(() => {\n            console.log('Interval Timer - Calling RefreshBanner every 6 seconds!');\n            refreshBanner()\n          }, 6000);\n\n        async function fetchData() {\n\n            const request = await axios.get(requests.fetchNetFlixOriginals);\n\n            console.log(\"Banner: \", request.data.results)\n\n            // Only Fetch the Movie List Once - so only one call to the api when app loads.\n            // Store the list in with this setMovieList \n            // And reference with 'movieList' if you need it again/\n            // Could also add some other function to reload/update / to reload the whole list\n           \n            setMovieList(request.data.results);\n\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length)\n                ]\n            );\n\n            if (isMobile) {\n                setDescriptionCount('75')\n                // alert(\"I am a mobile device - setting word count to \" + descriptionCount)\n                console.log('Mobile Device')\n            } else {\n               // alert(\"I'm not a mobile device - setting word count to \" + descriptionCount)\n               setDescriptionCount('150')\n               console.log('Browser Device')\n            }\n            \n            console.log('Description Length Set to: ', descriptionCount)\n\n            return request;\n        }\n\n        fetchData()\n\n        return () => clearInterval(interval);\n\n    }, [descriptionCount]);\n\n    // console.log(\"Random Banner Movie\", movie)\n\n    // Truncate the descriptipon (or anything to n characters  and add ...)\n    function truncate(str,n) {\n            return str?.length > n ? str.substr(0,n -1) + \" ...\" : str ;\n    }\n\n    return (\n        <header className=\"banner\"\n        style={{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n            )`\n            ,\n            backgroundPosition: \"center center\"\n        }}\n        //onClick={ refreshBanner }\n        >\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner_buttons\">\n                <Link to=\"/BrowserLocation\">\n                    <button className=\"banner_button\">Play</button>\n                </Link>\n                <Link to={{\n                    pathname:'/profile',\n                    LinkProps:{\n                        name:'Props passed by Link'\n                    }\n                }}>\n                    <button className=\"banner_button\">My List</button>\n                </Link>\n                {/*<button className=\"banner_button\" onClick={ refreshPage }>Next</button>*/}\n                </div>\n                <br></br>\n                <h1 className=\"banner_description\">\n                    {truncate(movie?.overview,descriptionCount)}\n                </h1>\n                \n            </div>\n\n            <div className=\"banner--fadeBottom\"></div>\n\n            {\" \"}\n\n        </header>\n    )\n}\n\nexport default Banner","/Users/cclark/july-netflix/netflix-clone/src/App.js",["52","53"],"// TMDB API 1b1c3a17bdc49283dd634b6645f1608d\nimport './App.css';\nimport Row from './Row'\nimport requests from './requests'\nimport Banner from './Banner'\nimport Nav from './Nav'\nimport Profile from './Profile'\nimport Footer from './Footer'\nimport BrowserLocation from './getlocation'\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nfunction App() {\n\n  function refreshPage() {\n    window.location.reload();\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n      <Switch>\n\n      <Route path=\"/profile\" >\n            <Profile quote='99 Red Balloons' />\n      </Route>\n     \n\n      <Route path=\"/BrowserLocation\">\n        <BrowserLocation />\n        </Route>  \n\n      <Route path=\"/\">\n      <Nav />\n      <Banner />  \n      <Row \n      title=\"Netflix Originals\" \n      fetchUrl={requests.fetchNetFlixOriginals} \n      isLargeRow={true} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrendingNow}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorroMovies}/>\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n      </Route>\n\n        </Switch>\n      </Router>\n      <Footer></Footer>\n     \n    </div>\n  );\n}\n\nexport default App;\n","/Users/cclark/july-netflix/netflix-clone/src/axios.js",[],"/Users/cclark/july-netflix/netflix-clone/src/reportWebVitals.js",[],"/Users/cclark/july-netflix/netflix-clone/src/index.js",[],"/Users/cclark/july-netflix/netflix-clone/src/Footer.js",[],"/Users/cclark/july-netflix/netflix-clone/src/Nav.js",["54","55"],"/Users/cclark/july-netflix/netflix-clone/src/Row.js",[],"/Users/cclark/july-netflix/netflix-clone/src/Profile.js",[],"/Users/cclark/july-netflix/netflix-clone/src/getlocation.js",[],"/Users/cclark/july-netflix/netflix-clone/src/googlemaps.js",[],{"ruleId":"56","severity":1,"message":"57","line":2,"column":9,"nodeType":"58","messageId":"59","endLine":2,"endColumn":14},{"ruleId":"56","severity":1,"message":"60","line":3,"column":26,"nodeType":"58","messageId":"59","endLine":3,"endColumn":32},{"ruleId":"56","severity":1,"message":"61","line":9,"column":5,"nodeType":"58","messageId":"59","endLine":9,"endColumn":14},{"ruleId":"62","severity":1,"message":"63","line":83,"column":8,"nodeType":"64","endLine":83,"endColumn":26,"suggestions":"65"},{"ruleId":"56","severity":1,"message":"66","line":10,"column":50,"nodeType":"58","messageId":"59","endLine":10,"endColumn":54},{"ruleId":"56","severity":1,"message":"67","line":14,"column":12,"nodeType":"58","messageId":"59","endLine":14,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":2,"column":9,"nodeType":"58","messageId":"59","endLine":2,"endColumn":14},{"ruleId":"56","severity":1,"message":"66","line":2,"column":16,"nodeType":"58","messageId":"59","endLine":2,"endColumn":20},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'movieList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'movieList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMovie' needs the current value of 'movieList'.","ArrayExpression",["68"],"'Link' is defined but never used.","'refreshPage' is defined but never used.",{"desc":"69","fix":"70"},"Update the dependencies array to be: [descriptionCount, movieList]",{"range":"71","text":"72"},[3014,3032],"[descriptionCount, movieList]"]